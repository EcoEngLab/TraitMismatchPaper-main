}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[changes[i]+2])))>3000){
#difference bigger, smooth it
data[changes[i]+1] <- mean(data[changes[i]], data[changes[i]+2])
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
data
data
Smoothing.Single(yo)
data[changes[i]+1]
data
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000){
#difference bigger, smooth it
data[(changes[i]+1)] <- mean(data[changes[i]], data[(changes[i]+2)])
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
c
c
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000){
#difference bigger, smooth it
data[(changes[i]+1)] <- mean(data[changes[i]], data[(changes[i]+2)])
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
abs(diff(c(data[changes[i]],data[(changes[i]+2)])))
i
changes[i]
data
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000){
#difference bigger, smooth it
data[(changes[i]+1)] <- mean(data[changes[i]], data[(changes[i]+2)])
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
changes
data[change[i]]
data[changes[i]]
data[changes[i]+1]
data[(changes[i]+1)]
mean(data[changes[i]], data[(changes[i]+2)])
data[changes[i]]
?mean
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000){
#difference bigger, smooth it
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
c
Q
#function to smooth pixels
Smoothing.Alex <- function(data){
drops <- which(diff(data)<(-3000))
if(length(drops)>0){ #check if there are drops
for(i in 1:length(drops)){
#browser()
# an if-else statement to check if its a rise rather than drop
onediff <- abs(diff(c(data[drops[i]],data[drops[i]-1])))
twodiff <- abs(diff(c(data[drops[i]-1],data[drops[i]-2])))
#^absolute difference for back one or back two, check if its a rise
if(onediff>3000|twodiff>3000){
#difference is bigger than 3000, its a random peak, smoothing it
if(onediff>3000){
data[drops[i]] <- mean(c(data[drops[i]+1], data[drops[i]-1]))
}else{
if(twodiff>3000){
data[drops[i]:(drops[i]-1)] <- mean(c(data[drops[i]+1], data[drops[i]-2]))
}else{print("Something's wrong")}
}
}else{
#not a peak, its a normal drop:
counter <- 1
switch <- "Keep Going"
#browser()
while(switch=="Keep Going"){
#difference of the next num after drop with initial number:
diffnext <- abs(diff(c(data[drops[i]+counter+1],data[drops[i]])))
if(diffnext<3000){ #if difference of next compared with previous is smaller than 3000, i.e bounce back
if(counter<3){#drops are lower than 3
#raises back up, calc average
avg <- mean(data[drops[i]], data[drops[i]+counter+1])
data[(drops[i]+1):(drops[i]+counter)] <- avg
switch <- "Done"
}else{ #consecutive is higher than 3
data <- rep(NA, length(data)) #throw away everything
switch<- "Done"
}
}else{
#difference didnt raise back
counter <- counter+1
#adding if counter larger than 2, will instantly remove row
if(counter>2){
data <- rep(NA, length(data)) #throw away everything
switch<- "Done"
}else{}
}
}
}
}
}else{print("nothing to smooth")}
return(data)
}
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000){
#difference bigger, smooth it
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
c
c
c
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000){
#difference bigger, smooth it
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
data
data
Smoothing.Single(yo)
Smoothing.Single(yo)
abs(diff(c(data[changes[i]],data[(changes[i]+2)])))>3000
abs(diff(c(data[changes[i]],data[(changes[i]+2)])))
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
c
c
c
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
#browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,5000)
Smoothing.Single(yo)
yo <- c(5000,5000,5000,1,1,5000,5000,5000)
Smoothing.Single(yo)
yo <- c(5000,5000,5000,1,1,1,5000,5000,5000)
Smoothing.Single(yo)
yo <- c(5000,5000,5000,1,5000,5000,1,5000)
Smoothing.Single(yo)
abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,1,5000)
Smoothing.Single(yo)
data
data[(changes[i]+1)]
data
abs(diff(c(data[changes[i]],data[(changes[i]+2)])))
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(is.na(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))){
#NA, do nothing
})else{
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}
}else{
#nothing to smooth
}
return(data)
}
Smoothing.Single<- function(data){
))
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(is.na(abs(diff(c(data[changes[i]],data[(changes[i]+2)]))))){
#NA, do nothing
}else{
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(5000,5000,5000,1,5000,5000,1,5000)
Smoothing.Single(yo)
c
c
c
c
yo <- c(1,1,1,5000,1,1,1)
Smoothing.Single(yo)
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
#browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(is.na(abs(diff(c(data[changes[i]],data[(changes[i]+2)]))))){
#NA, do nothing
}else{
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(1,1,1,5000,1,1,1)
Smoothing.Single(yo)
yo <- c(1,1,1,5000,5000,1,1)
Smoothing.Single(yo)
yo <- c(1,1,1,5000,1,1,1,-5000,1,1)
Smoothing.Single(yo)
Smoothing.Single<- function(data){
changes <- which(abs(diff(data))>3000) #index for change larger than 3000
#browser()
if(length(changes)>0){
#do the smoothing
for(i in 1:length(changes)){
if(is.na(abs(diff(c(data[changes[i]],data[(changes[i]+2)]))))){
#NA, do nothing
}else{
if(abs(diff(c(data[changes[i]],data[(changes[i]+2)])))<3000){
#difference after 1 is back to similar
data[(changes[i]+1)] <- mean(c(data[changes[i]], data[(changes[i]+2)]))
}else{
#do nothing
}
}
}
}else{
#nothing to smooth
}
return(data)
}
yo <- c(1,2,3)
wow <- as.factor(yo)
class(wow)
c(wow[1], wow[3])
wow[1]
c(wow[1], wow[3])
version
terrain.colors(10)
rm(list=ls())
data <- read.csv("ParentalBehaviour_UGSummary.csv")
library(MCMCglmm)
#Repeatability of each bird individual for each vid:
model <-MCMCglmm(NumVisits~1, random=~Individual,data=data, nitt=500000)
summary(model)
Control <- rep(0,200)
8*50
Treatment <- rep(c(0,0,0,0,2.5,2.5,0.5,0.5), 25)
rm(list=ls())
Control <- rep(0,200)
Treatment <- rep(c(0,0,0,0,2.5,2.5,0.5,0.5), 25)
FakeData <- data.frame(Value=c(Control,Treatment), Treatments= c(rep(0,200), rep(1,200)))
View(FakeData)
FakeData <- data.frame(Value=c(Control,Treatment), Treatment= c(rep(0,200), rep(1,200)))
View(FakeData)
Treatment <- rep(c(0,0,0,0,2.5,2.5,0.5,0.5), 25)
sd(Treatment)
2003:2005
match(2003:2005, 2003)
match(2003:2005, 2003:2005)
2003:2005 %in% 2003
which(2003:2005 %in% 2003)
install.packages("mdhglm")
library("mdhglm")
?jointfit
data(eg)
eg1<-eg[1:100,] ## using sampled data to have faster results
ZZ1<-model.matrix(~as.factor(eg1$litter)-1)
View(ZZ1)
dim(ZZ1)
as.factor(eg1$litter)
View(eg1)
?model.matrix
yo <- list()
wow <- data.frame(wow=c(1))
yo [[1]] <- wow
yo <- list()
wow <- data.frame(wow=c(1))
yo [1] <- wow
View(yo)
wow <- data.frame(wow=c(1))
yowow
wow
yo [1] <- wow
yo
yo[1]<- wow
yo
wow <- data.frame(wow=c(1))
yo[[1]]<- wow
yo
getwd)
getwd()
yo <- read.csv("FramesShortSexPredict_AC.csv")
View(yo)
bib.4= data.frame(matrix(vector(), 0, 3,
dimnames=list(c(), c("BirdID", "CaptureYear", "Age"))),
stringsAsFactors=F)
View(bib.4)
q()
shiny::runApp('Projects/Budget Shiny/Code')
#load packages
library(readxl)
library(tidyverse)
library(stringr)
source('~/Silwood Projects/ArrivalNetwork/Code/ArrivalNetwork.R')
library(shiny); runApp('C:/Users/Alex Chan/AppData/Local/Temp/Temp1_sci-app-nobackup.zip/sci-app-nobackup/app-UK.R')
runApp('C:/Users/Alex Chan/Downloads/sci-app-nobackup/sci-app-nobackup')
install.packages('rgdal')
runApp('C:/Users/Alex Chan/Downloads/sci-app-nobackup/sci-app-nobackup')
setwd()
getwd()
setwd("../Desktop/sci-app-nobackup/sci-app-nobackup/")
runApp('C:/Users/Alex Chan/Downloads/sci-app-nobackup/sci-app-nobackup')
runApp()
runApp()
getwd()
setwd("")
setwd("~")
runApp('C:/Users/Alex Chan/Desktop/sci-app-nobackup/sci-app-nobackup')
runApp('C:/Users/Alex Chan/Desktop/sci-app-nobackup/sci-app-nobackup')
setwd("~/Des")
runApp('C:/Users/Alex Chan/Desktop/sci-app-nobackup/sci-app-nobackup')
runApp()
runApp('C:/Users/Alex Chan/Desktop/sci-app-nobackup/sci-app-nobackup')
shiny::runApp('C:/Users/Alex Chan/Desktop/sci-app')
runApp('C:/Users/Alex Chan/Desktop/sci-app')
shiny::runApp('Projects/Budget Shiny/Code')
runApp('Projects/Budget Shiny/Code')
library(shiny)
library(plotly)
runApp('Projects/Budget Shiny/Code')
source('~/TraitMismatchPaper-main/code/SI_Figures.R', echo=TRUE)
getwd()
setwd("TraitMismatchPaper-main/data")
source('~/TraitMismatchPaper-main/code/SI_Figures.R', echo=TRUE)
