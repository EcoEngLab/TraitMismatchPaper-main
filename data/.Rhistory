MDR.data <- subset(Aaeg.data, trait.name == "MDR")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, data = MDR.data, ylab="MDR")
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.MDR.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
# MCMC Settings: number of posterior dist elements = [(ni - nb) / nt ] * nc
ni <- 25000 # number of iterations in each chain
nb <- 5000 # number of 'burn in' iterations to discard
nt <- 10 # thinning rate - jags saves every nt iterations in each chain
nc <- 3 # number of chains
# Temperature sequence for derived quantity calculations
Temp.xs <- seq(0, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
### Fitting the trait thermal response; Pull out data columns as vectors
data <- lf.data.comb # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
N.obs <- length(trait)
temp <- data$T
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
trait
MDR.data <- subset(Aaeg.data, trait.name == "MDR")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, data = MDR.data, ylab="MDR")
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.MDR.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
# MCMC Settings: number of posterior dist elements = [(ni - nb) / nt ] * nc
ni <- 25000 # number of iterations in each chain
nb <- 5000 # number of 'burn in' iterations to discard
nt <- 10 # thinning rate - jags saves every nt iterations in each chain
nc <- 3 # number of chains
# Temperature sequence for derived quantity calculations
Temp.xs <- seq(0, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
### Fitting the trait thermal response; Pull out data columns as vectors
data <- lf.data.comb # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
N.obs <- length(trait)
temp <- data$T
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
MDR.data <- subset(Aaeg.data, trait.name == "MDR")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, data = MDR.data, ylab="MDR")
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.MDR.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
# MCMC Settings: number of posterior dist elements = [(ni - nb) / nt ] * nc
ni <- 25000 # number of iterations in each chain
nb <- 5000 # number of 'burn in' iterations to discard
nt <- 10 # thinning rate - jags saves every nt iterations in each chain
nc <- 3 # number of chains
# Temperature sequence for derived quantity calculations
Temp.xs <- seq(0, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
### Fitting the trait thermal response; Pull out data columns as vectors
data <- lf.data.comb # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
N.obs <- length(trait)
temp <- data$T
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
MDR.data <- subset(Aaeg.data, trait.name == "MDR")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, data = MDR.data, ylab="MDR")
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.MDR.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
### Fitting the trait thermal response; Pull out data columns as vectors
data <- lf.data.comb # this lets us reuse the same generic code: we only change this first line
data
### Fitting the trait thermal response; Pull out data columns as vectors
data <- MDR.data # this lets us reuse the same generic code: we only change this first line
data
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
jag.data
trait
### Fitting the trait thermal response; Pull out data columns as vectors
data <- MDR.data # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
trait
N.obs <- length(trait)
temp <- data$T
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
jag.data
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
parameters
temp
N.Temp.xs
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
# Development rate
MDR.data <- subset(Aaeg.data, trait.name == "MDR")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, data = MDR.data, ylab="MDR")
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.MDR.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
# MCMC Settings: number of posterior dist elements = [(ni - nb) / nt ] * nc
ni <- 25000 # number of iterations in each chain
nb <- 5000 # number of 'burn in' iterations to discard
nt <- 10 # thinning rate - jags saves every nt iterations in each chain
nc <- 3 # number of chains
# Temperature sequence for derived quantity calculations
Temp.xs <- seq(0, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
### Fitting the trait thermal response; Pull out data columns as vectors
data  <- MDR.data # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
N.obs <- length(trait)
temp  <- data$T
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
set.seed(1234)
Aaeg.data <- read.csv("Desktop/AedesBayes.csv")
MDR.data <- subset(Aaeg.data, trait.name == "MDR")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, data = MDR.data, ylab="MDR")
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.MDR.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
# MCMC Settings: number of posterior dist elements = [(ni - nb) / nt ] * nc
ni <- 25000 # number of iterations in each chain
nb <- 5000 # number of 'burn in' iterations to discard
nt <- 10 # thinning rate - jags saves every nt iterations in each chain
nc <- 3 # number of chains
# Temperature sequence for derived quantity calculations
Temp.xs <- seq(0, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
### Fitting the trait thermal response; Pull out data columns as vectors
data  <- MDR.data # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
N.obs <- length(trait)
temp  <- data$T
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs,
N.Temp.xs = N.Temp.xs)
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
set.seed(1234)
Aaeg.data <- read.csv("Desktop/AedesBayes.csv")
lf.data.comb <- rbind(mu.data.inv, lf.data)
lf.data.comb <- subset(Aaeg.data, trait.name == "MDR")
lf.data.comb
# Parameters to Estimate
parameters <- c("cf.q", "cf.T0", "cf.Tm","cf.sigma", "z.trait.mu.pred")
# Initial values for the parameters
inits<-function(){list(
cf.q = 0.01,
cf.Tm = 35,
cf.T0 = 5,
cf.sigma = rlnorm(1))}
# MCMC Settings: number of posterior dist elements = [(ni - nb) / nt ] * nc
ni <- 25000 # number of iterations in each chain
nb <- 5000 # number of 'burn in' iterations to discard
nt <- 8 # thinning rate - jags saves every nt iterations in each chain
nc <- 3 # number of chains
# Temperature sequence for derived quantity calculations
Temp.xs <- seq(0, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
### Fitting the trait thermal response; Pull out data columns as vectors
data <- lf.data.comb # this lets us reuse the same generic code: we only change this first line
trait <- data$trait
N.obs <- length(trait)
temp <- data$T
data
trait
# Bundle all data in a list for JAGS
jag.data<-list(trait = trait, N.obs = N.obs, temp = temp, Temp.xs = Temp.xs, N.Temp.xs = N.Temp.xs)
jag.data
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
lf.fit <- jags(data=jag.data, inits=inits, parameters.to.save=parameters,
model.file="Desktop/quad.txt", n.thin=nt, n.chains=nc, n.burnin=nb,
n.iter=ni, DIC=T, working.directory=getwd())
lf.fit.mcmc <- as.mcmc(lf.fit)
lf.fit$BUGSoutput$summary[1:5,]
MCMCtrace(lf.fit.mcmc,
params=c("cf.q", "cf.Tm", "cf.T0"),
pdf=FALSE) ## from the MCMCvis package
s1<-as.data.frame(lf.fit.mcmc[[1]])
par(mfrow=c(3,1))
for(i in c(1,3,4)) acf(s1[,i], lag.max=20)
priors<-matrix(NA, nrow=10000, ncol=3) # 3 params, 1 each
priors[,1]<- runif(10000, min=0, max=1) ## q
priors[,2]<- runif(10000, min=25, max=45) ## TM
priors[,3]<- runif(10000, min=0, max=24) ## T0
MCMCtrace(lf.fit.mcmc,
params=c("cf.q", "cf.Tm", "cf.T0"),
priors=priors,
post_zm = FALSE,
type= "density",
pdf=FALSE) ## from the MCMCvis package
ipairs(s1[,c(1,3,4)], ztransf = function(x){x[x<1] <- 1; log2(x)})
MCMCtrace(lf.fit.mcmc,
params=c("cf.q", "cf.Tm", "cf.T0"),
pdf=FALSE) ## from the MCMCvis package
s1<-as.data.frame(lf.fit.mcmc[[1]])
par(mfrow=c(3,1))
for(i in c(1,3,4)) acf(s1[,i], lag.max=20)
priors<-matrix(NA, nrow=10000, ncol=3) # 3 params, 1 each
priors[,1]<- runif(10000, min=0, max=1) ## q
priors[,2]<- runif(10000, min=25, max=45) ## TM
priors[,3]<- runif(10000, min=0, max=24) ## T0
MCMCtrace(lf.fit.mcmc,
params=c("cf.q", "cf.Tm", "cf.T0"),
priors=priors,
post_zm = FALSE,
type= "density",
pdf=FALSE) ## from the MCMCvis package
ipairs(s1[,c(1,3,4)], ztransf = function(x){x[x<1] <- 1; log2(x)})
plot(trait ~ T, xlim = c(0, 45), ylim = c(0,42), data = lf.data.comb,
ylab = "MDR for Ae. aegypti", xlab = "Temperature")
par(mfrow=c(1,1), bty="l")
plot(trait ~ T, xlim = c(0, 45), ylim = c(0,42), data = lf.data.comb,
ylab = "MDR for Ae. aegypti", xlab = "Temperature")
plot(trait ~ T, xlim = c(0, 1), ylim = c(0,42), data = lf.data.comb,
ylab = "MDR for Ae. aegypti", xlab = "Temperature")
plot(trait ~ T, xlim = c(0, 45), ylim = c(0,1), data = lf.data.comb,
ylab = "MDR for Ae. aegypti", xlab = "Temperature")
lines(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "2.5%"] ~ Temp.xs,
lty = 2, col=2, lwd=2)
lines(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "97.5%"] ~ Temp.xs,
lty = 2, col=2, lwd=2)
lines(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "mean"] ~ Temp.xs)
plot(trait ~ T, xlim = c(0, 45), ylim = c(0,0.2), data = lf.data.comb,
ylab = "MDR for Ae. aegypti", xlab = "Temperature")
lines(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "2.5%"] ~ Temp.xs,
lty = 2, col=2, lwd=2)
lines(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "97.5%"] ~ Temp.xs,
lty = 2, col=2, lwd=2)
lines(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "mean"] ~ Temp.xs)
Temp.xs[which.max(as.vector(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "mean"]))]
lf.fit$BUGSoutput$summary
lf.fit$BUGSoutput$summary[6]
Temp.xs[which.max(as.vector(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "97.5%"]))]
Temp.xs[which.max(as.vector(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "97.5%"]))]
Temp.xs[which.max(as.vector(lf.fit$BUGSoutput$summary[6:(6 + N.Temp.xs - 1), "2.5%"]))]
(40/160)*100
(182/240)*100
160*0.54
240*.88
74*.49
199*.84
160*.09
86*.47
211*.87
36*1
167*.48
14*0
(45/85)*100
(52/75)*100
(42/66)*100
(85/95)*100
(85/93)*100
(85/92)*100
(85/90)*100
24/25*100
85/.9441
(85/90.03284)*100
setwd("~/Desktop/TraitMismatchPaper-main/data")
# load packages
require('tidyverse')
require('nls.multstart')
require('broom')
require('rTPC')
require('data.table')
require('car')
require('patchwork')
require('minpack.lm')
require('boot')
rm(list=ls())
graphics.off()
setwd("~/Desktop/TraitMismatchPaper-main/data")
require('tidyverse')
require('data.table')
require('rTPC')
require('car')
require('grDevices')
require('Cairo')
require('ggplot2')
require('ggpubr')
require('patchwork')
require('cowplot')
require('ggtext')
rm(list=ls())
graphics.off()
setwd("~/Desktop/TraitMismatchPaper-main/data")
##reading data
rmpredictions <- read.csv("rmprediction.csv")
rmPeak <- rmpredictions %>% group_by(species) %>%
summarise(which(rmpredictions$estimate == max(estimate)))
rmPeakdata <- rmpredictions[rmPeak$`which(rmpredictions$estimate == max(estimate))`, ]
rmPeakdata <- rmPeakdata %>% rename(rmax = estimate)
View(rmPeakdata)
Species <- rmPeakdata$species
alpha  <- as_tibble(read.csv('alpha_Tpks.csv', header = TRUE)) %>%
filter(param=="topt") %>%
filter(species %in% Species)%>%
select(species,estimate, conf_lower, conf_upper,trait)
bpk  <- as_tibble(read.csv('bpk_Tpks.csv', header = TRUE)) %>%
filter(param=="topt") %>%
filter(species %in% Species)%>%
select(species,estimate, conf_lower, conf_upper,trait)
z  <- as_tibble(read.csv('z_Tpks.csv', header = TRUE)) %>%
filter(param=="topt") %>%
filter(species %in% Species)%>%
select(species,estimate, conf_lower, conf_upper,trait)
zj  <- as_tibble(read.csv('zj_Tpks.csv', header = TRUE)) %>%
filter(param=="topt") %>%
filter(species %in% Species)%>%
select(species,estimate, conf_lower, conf_upper,trait)
AllOpt<- rbind(alpha,bpk,z,zj)
OptVar <- AllOpt %>% group_by(species) %>%
summarise(variance = var(estimate))
OptSum <- AllOpt %>% group_by(species) %>%
summarise(sum = sum(estimate))
##changing order of df for plotting
colors <- c("#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525")
OrderCol <- colors[order(rmPeakdata$rmax)]
SPorder <- rmPeakdata$species[order(rmPeakdata$rmax)]
##Fig 5a: Rm Curves##
fig6a <-  ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r[m]), ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)+
geom_line(size=0.85)+
# geom_hline(aes(yintercept = 0), linetype = 2, show.legend = FALSE)+
scale_colour_manual(values = colors,
name=expression(bold("species")),
labels =SPorder,
guide = guide_legend(nrow = 6,ncol =1 ,
direction = "horizontal",
title.position = "top",
title.hjust=0.5))+
theme(text=element_text(family="Times"))+
theme(legend.text=element_text(family="Times",face = 'italic', size = 7),
legend.position = c(-0.4,0.68))+
geom_text(aes(x = -Inf, y = Inf,hjust = -0.5,vjust=1.4,
label = "A"),size = 5, colour = "black")+
theme(legend.title = element_blank())+
theme(legend.margin=margin(t = -0.2, b = 0.1,r=0.1,l = 0.1, unit='cm'),
aspect.ratio = 1)+
geom_point(data= rmPeakdata, aes(x=temp, y=rmax), size=3)
fig6a
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r[m]), ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic((r)[m]), ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)+
geom_line(size=0.85)
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)+
geom_line(size=0.85)+
# geom_hline(aes(yintercept = 0), linetype = 2, show.legend = FALSE)+
scale_colour_manual(values = colors,
name=expression(bold("species")),
labels =SPorder,
guide = guide_legend(nrow = 6,ncol =1 ,
direction = "horizontal",
title.position = "top",
title.hjust=0.5))+
theme(text=element_text(family="Times"))
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)+
geom_line(size=0.85)+
# geom_hline(aes(yintercept = 0), linetype = 2, show.legend = FALSE)+
scale_colour_manual(values = colors,
name=expression(bold("species")),
labels =SPorder,
guide = guide_legend(nrow = 6,ncol =1 ,
direction = "horizontal",
title.position = "top",
title.hjust=0.5))+
theme(text=element_text(family="Times"))+
theme(legend.text=element_text(family="Times",face = 'italic', size = 7),
legend.position = c(-0.4,0.68))+
geom_text(aes(x = -Inf, y = Inf,hjust = -0.5,vjust=1.4,
label = "A"),size = 5, colour = "black")
ggplot(rmpredictions, aes(temp,estimate,colour=factor(species, levels=SPorder)))+
scale_x_continuous(expression(plain(paste(" Temperature (",degree,"C)"))))+
scale_y_continuous(expression(plain(paste("Maximal population growth rate (",italic(r)[m], ")"))),
limits=c(-0.001,0.255),
expand = c(0.01, 0),
breaks=seq(0,0.25, by=0.05))+
theme_bw(base_size = 12)+
geom_line(size=0.85)+
# geom_hline(aes(yintercept = 0), linetype = 2, show.legend = FALSE)+
scale_colour_manual(values = colors,
name=expression(bold("species")),
labels =SPorder,
guide = guide_legend(nrow = 6,ncol =1 ,
direction = "horizontal",
title.position = "top",
title.hjust=0.5))+
theme(text=element_text(family="Times"))+
theme(legend.text=element_text(family="Times",face = 'italic', size = 7),
legend.position = 'none')+
geom_text(aes(x = -Inf, y = Inf,hjust = -0.5,vjust=1.4,
label = "A"),size = 5, colour = "black")+
theme(legend.title = element_blank())+
theme(legend.margin=margin(t = -0.2, b = 0.1,r=0.1,l = 0.1, unit='cm'),
aspect.ratio = 1)+
geom_point(data= rmPeakdata, aes(x=temp, y=rmax), size=3)
